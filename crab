#!/bin/bash

INIT_PAR="#Specify the file extension to add to the backup
file_type='db';
#Specify the directory with the original files
origin_folder=$(pwd)
#Specify the destination folder where your backups will be stored (use abslute path)
destination_folder=$(pwd)
#Specify the maximum number of backups to store (default: 5)
number_backups=5
#Specify text-editor (default: vim)
text_editor=vim"



function help {

    echo "

---------------------------------------------
|        _____ ______   ___  ______         |
|       /  __ \| ___ \ / _ \ | ___ \        |
|       | /  \/| |_/ // /_\ \| |_/ /        |
|       | |    |    / |  _  || ___ \        |
|       | \__/\| |\ \ | | | || |_/ /        |
|        \____/\_| \_|\_| |_/\____/         |
|                                           |
|   CRAB - Create Regular Amiable Backup    |
---------------------------------------------
usage <\$path_to_script>/crab [-v | --version]
                             [-h | --help]
                             [-i | --init]
                             [-m | --make]
                             [-c | --config]
                             [-e | --ecron]
                             [--set-text-editor] PARAM
                             [--set-number-backups] PARAM
                             [--set-file-type] PARAM
                             [--set-destination-folder] PARAM
---------------------------------------------
-v --version             (show version of the script)
-h --help                (show this tutorial)
-i --init                (create crabrc file in dirrectory for backup
-m --make                (create backup manually)
-c --config              (open text editor to rewrite configuration file)
-e --ecron               (change crontab config)
--set-text-editor        (change text editor (default: vim))
--set-number-backups     (change number backups (default: 5))
--set-file-type          (set type of files to save in backups)
--set-destination-folder (set the path where backups will be stored)
--set-origin-folder      (set the path where the original files are stored)
"
    
}

function check_utils {

    . ~/.crabrc || text_editor='vim'
    if [ -z  $(which $text_editor) ]
    then
        echo "Please install $text_editor  or specify text-editor by using 'crab --set-text-editor <editor_name>'"
        exit
    fi
    if [ -z $(which zip) ]
    then
        echo "To use CRAB you should install zip util"
        exit
    fi
    if [ -z $(which unzip) ]
    then
        echo "To use CRAB you shold install unzip"
        exit
    fi
}

function change_config {
    
    echo "#Specify the file extension to add to the backup
file_type=$file_type
#Specify the destination folder where your backups will be stored (use abslute path)
destination_folder=$destination_folder
#Specify the directory with the original files
origin_folder=$origin_folder
#Specify the maximum number of backups to store (default: 5)
number_backups=$number_backups
#Specify text-editor (default: vim)
text_editor=$text_editor" > ~/.crabrc
    exit
     
}

function set_text_editor {
    
    if [ -n "$1" ]
    then
        . ~/.crabrc || (echo Try to use 'crab -i' && exit)
        text_editor=$1
        change_config
    else
        help
    fi
}

function set_number_backups {

    if [ -n "$1" ]
    then
        . ~/.crabrc || (echo Try to use 'crab -i' && exit)
        number_backups=$1
        change_config
    else
        help
    fi
}

function set_file_type {

    if [ -n "$1" ]
    then
        . ~/.crabrc || (echo Try to use 'crab -i' && exit)
        file_type=$1
        change_config 
    else
        help
    fi
}

function set_destination_folder {

    if [ -n "$1" ]
    then
        . ~/.crabrc || (echo Try to use 'crab -i' && exit)
        destination_folder=$1
        change_config
    else
        help
    fi 
}

function set_origin_folder {

    if [ -n "$1" ]
    then
        . ~/.crabrc || (echo Try to use 'crab -i' && exit)
        origin_folder=$1
        change_config
    else
        help
    fi 
}
function init {
    
    echo "$INIT_PAR" > ~/.crabrc
    check_utils || exit
    echo -e "\e[5m Create .crabrc file... \e[0m"
    sleep 3s
    . ~/.crabrc
    $text_editor ~/.crabrc
}

function make_backup {
    
    if [[ -f ~/.crabrc ]]
    then
        . ~/.crabrc
        check_utils
        echo "Get to work, guys! Create a backup!"
        archive="backup-$(date +%Y-%m-%d:%H:%M:%S)"
        EXT=$file_type
        mkdir -p "$destination_folder"
        check_count_files
        zip -r "$destination_folder/$archive.zip" $(ls $origin_folder | grep "$EXT$" | awk -v dir=$origin_folder/ '{ print dir $0 }') >> /dev/null
        if [[ $(unzip -tq "$destination_folder/$archive.zip") == "No"* ]]
        then
            echo "Saving..."
        else
            unzip -tq "$destination_folder/$archive.zip"
            echo "It seems that the backup was broken...I'll delete it now, and you try to check your files, then I'll try again."
            rm "$destination_folder/$archive.zip"
        fi
    else
        echo "You'll never learn! Maybe you can use '.crab -i'?"
    fi
}

function edit_crontab {

    echo 'Please edit your crontab to change periodicity of making backups'
    read -r -p "Are you sure? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY]|[дД][аА]|[дД])$ ]]
    then
        crontab -e
    else
        echo "Ahh, here we go again... And when will you stop bothering me unnecessarily?" 
    fi
}

function version {
    
    echo -e "\e[35;1;5;101mC\e[37;102mR\e[36;105mA\e[39;107mB\e[0m" v.1.1.2
}

function check_count_files {
    
    . ~/.crabrc
    cur_number=$(ls "$destination_folder"  | grep -c 'backup-.*.zip')
    (( cur_number=$cur_number-$number_backups+1 ))
    for ((i=0; i<$cur_number;i++))
    do
        rm "$destination_folder/$(ls "$destination_folder" | grep 'backup-.*.zip' | sort | grep --max-count=1 "backup")"
        echo "The oldest backup has been deleted"
    done
}

function write_config {

    . ~/.crabrc || text_editor='vim'
    check_utils
    $text_editor ~/.crabrc
}

if [ -n "$1" ]
then
    while [ -n "$1" ]
    do
        case "$1" in
            -i) init;;
            --init) init;;
            -c) write_config;;
            --config) write_config;;
            -e) edit_crontab;;
            --ecron) edit_crontab;;
            -h) help;;
            --help) help;;
            -m) make_backup;;
            --make) make_backup;;
            -v) version;;
            --version) version;;
            --set-text-editor) set_text_editor "$2";;
            --set-number-backups) set_number_backups "$2";;
            --set-file-type) set_file_type "$2";;
            --set-destination-folder) set_destination_folder "$2";;
            --set-origin-folder) set_origin_folder "$2";;
            *) help;;
        esac
        shift
    done
else
    help
fi
